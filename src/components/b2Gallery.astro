---
import Gridbox from "../layouts/Gridbox.astro";
import "../styles/cardObjects.scss";
---

<div class="galleryLoadingInd"></div>
<Gridbox id="latestWorks" />

<div id="loadMore" class="wideGo" style="display: none; text-align: center;">
  <a class="wideGoTitle"
    >Load more
    <svg class="dynamicarrow" viewBox="0 0 10 10">
      <g>
        <path class="line" d="M0 5h7"></path>
        <path class="arrow" d="M1 1l4 4-4 4"></path>
      </g>
    </svg>
  </a>
</div>

<script>
  // TypeScript types and interfaces
  interface DisplayImage {
    nameLossy: string;
    urlLossy: string;
    date: string;
    sketch: boolean | null;
    nsfw: boolean | null;
    versioning: boolean | null;
  }

  interface LosslessImage {
    nameLossless: string;
    urlLossless: string;
    date: string;
  }

  interface GalleryStateType {
    allDisplayImages: DisplayImage[];
    losslessImages: LosslessImage[];
    imageMetadata: WeakMap<object, any>;
    flagsCache: Map<string, string[]>;
  }

  const GalleryState: GalleryStateType = {
    allDisplayImages: [],
    losslessImages: [],
    imageMetadata: new WeakMap<object, any>(),
    flagsCache: new Map<string, string[]>(),
  };

  class FilterManager {
    filters: { nsfw: boolean; sketch: boolean; version: boolean };
    constructor() {
      this.filters = {
        nsfw: localStorage.getItem("filterNSFW") !== "displayed",
        sketch: localStorage.getItem("filterSketch") !== "displayed",
        version: localStorage.getItem("filterVersion") !== "displayed",
      };
    }

    applyFilters(images: DisplayImage[]): DisplayImage[] {
      return images.filter((item) => {
        return (
          (!this.filters.nsfw || !item.nsfw) &&
          (!this.filters.sketch || !item.sketch) &&
          (!this.filters.version || !item.versioning)
        );
      });
    }

    updateFilter(type: keyof typeof this.filters, value: boolean): void {
      this.filters[type] = value;
      localStorage.setItem(
        `filter${type.toUpperCase()}`,
        value ? "" : "displayed"
      );
    }
  }

  class ImageLoader {
    start: number;
    batchSize: number;
    loading: boolean;
    constructor(batchSize = 8) {
      this.start = 16;
      this.batchSize = batchSize;
      this.loading = false;
      this.setupInfiniteScroll();
    }

    setupInfiniteScroll(): void {
      const sentinel = document.createElement("div");
      sentinel.id = "scroll-sentinel";
      sentinel.style.height = "1px";
      const latestWorks = document.getElementById("latestWorks");
      if (latestWorks) {
        latestWorks.after(sentinel);
      }

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting && !this.loading) {
              this.loadMoreImages();
            }
          });
        },
        {
          rootMargin: "200px",
        }
      );

      observer.observe(sentinel);
    }

    async loadMoreImages(): Promise<void> {
      if (this.loading || this.start >= GalleryState.allDisplayImages.length) {
        return;
      }

      this.loading = true;
      const loadMoreButton = document.getElementById(
        "loadMore"
      ) as HTMLButtonElement | null;
      if (loadMoreButton) {
        loadMoreButton.textContent = "Pulling more shite";
      }

      const end = Math.min(
        this.start + this.batchSize,
        GalleryState.allDisplayImages.length
      );

      try {
        loadImages(this.start, end);
        this.start = end;

        if (end >= GalleryState.allDisplayImages.length) {
          this.disableLoader();
        }
      } finally {
        this.loading = false;
        if (loadMoreButton) {
          loadMoreButton.innerHTML =
            "You reached the end..!<br><code>earliest index: 29 November 2020</code>";
          loadMoreButton.style.border = "none";
        }
      }
    }

    disableLoader(): void {
      const loadMoreButton = document.getElementById(
        "loadMore"
      ) as HTMLButtonElement | null;
      const titleElement = document.querySelector(
        ".wideGoTitle"
      ) as HTMLElement | null;
      const sentinel = document.getElementById("scroll-sentinel");

      if (titleElement) {
        titleElement.textContent = "Nothing left to load...";
      }

      if (loadMoreButton) {
        loadMoreButton.style.pointerEvents = "none";
        loadMoreButton.classList.add("fade-out");
      }

      if (sentinel) {
        sentinel.remove();
      }
    }
  }

  function loadImages(start: number, end: number): void {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          if (img.dataset.src) {
            img.src = img.dataset.src;
            delete img.dataset.src;
            observer.unobserve(img);
          }
        }
      });
    });

    const displayCount = GalleryState.allDisplayImages.slice(start, end);
    const latestWorkGrid = document.getElementById("latestWorks");
    if (!latestWorkGrid) return;
    const imgDataFragment = document.createDocumentFragment();

    displayCount.forEach((item) => {
      const container = document.createElement("div");
      container.className = "image-container";

      const img = new Image();
      //img.setAttribute("data-aos", "zoom-in");
      img.className = "interactive imgs cards b2Imgs imgcard";
      //img.setAttribute("orbReact", "true");

      img.dataset.src = item.urlLossy;
      img.alt = item.nameLossy;
      img.setAttribute("aria-label", item.nameLossy);

      Object.assign(img.dataset, {
        nsfw: item.nsfw ? "true" : "false",
        sketch: item.sketch ? "true" : "false",
        versioning: item.versioning ? "true" : "false",
      });

      const matchingLossless = GalleryState.losslessImages.find(
        (x) => x.nameLossless === item.nameLossy
      );
      img.dataset.lossless = matchingLossless
        ? matchingLossless.urlLossless
        : "false";

      container.appendChild(img);
      imgDataFragment.appendChild(container);
      imageObserver.observe(img);
    });

    latestWorkGrid.appendChild(imgDataFragment);
  }

  // Helper functions
  function getFlags(input: string): string[] {
    if (GalleryState.flagsCache.has(input)) {
      return GalleryState.flagsCache.get(input)!;
    }

    const flags = input
      .split(".")
      .join(" ")
      .split(" ")
      .filter((entry) => entry.startsWith("-"))
      .map((entry) => entry.substr(1));

    GalleryState.flagsCache.set(input, flags);
    return flags;
  }

  function hasExtraFlags(imgsFilename: string): boolean {
    const flags = getFlags(imgsFilename);
    if (flags.length === 0) return false;
    if (flags.length === 1 && flags.includes("sfw")) return false;
    if (
      flags.includes("0") ||
      flags.includes("default") ||
      flags.includes("origin")
    )
      return false;
    return true;
  }

  // API fetching
  async function fetchDisplay(): Promise<any[]> {
    const loadingIndicator = document.querySelector(
      ".galleryLoadingInd"
    ) as HTMLElement | null;

    try {
      if (loadingIndicator) {
        loadingIndicator.textContent = "Hold on...";
        loadingIndicator.classList.add("holdon");
      }

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000);

      const response = await fetch(
        "https://pottob2-dispgallery.pottoart.workers.dev/api/v1/list_all_files?maxFileCount=800",
        { signal: controller.signal }
      );

      clearTimeout(timeoutId);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error: any) {
      const errorMessage =
        error.name === "AbortError"
          ? `Request timed out. You could probably try refreshing but it's a lot more likely something went horribly wrong in the backend.`
          : `Error: ${error.message}`;

      if (loadingIndicator) {
        loadingIndicator.textContent = errorMessage;
        loadingIndicator.classList.remove("holdon");
      }
      throw error;
    }
  }

  // Initialize the application
  (() => {
    const filterManager = new FilterManager();
    const imageLoader = new ImageLoader(8);

    function processImages(data: any[]): void {
      data.forEach((item) => {
        if (
          item.contentType &&
          typeof item.contentType === "string" &&
          item.contentType.includes("image/")
        ) {
          if (item.name.includes("display/")) {
            const isSketch = item.url.includes("sketch");
            const isNSFW = item.url.includes("nsfw");
            const hasVersioning = hasExtraFlags(item.name);

            if (
              (!filterManager.filters.nsfw || !isNSFW) &&
              (!filterManager.filters.version || !hasVersioning) &&
              (!filterManager.filters.sketch || !isSketch)
            ) {
              GalleryState.allDisplayImages.push({
                nameLossy: item.name
                  .replace(/(?:display|lossless)\//, "")
                  .replace("nsfw/", "")
                  .replace("sketch/", "")
                  .split(".")[0],
                urlLossy: item.url,
                date: item.uploadTime,
                sketch: isSketch || null,
                nsfw: isNSFW || null,
                versioning: hasVersioning || null,
              });
            }
          } else if (item.name.includes("lossless/")) {
            GalleryState.losslessImages.push({
              nameLossless: item.name
                .replace(/(?:display|lossless)\//, "")
                .replace("nsfw/", "")
                .split(".")[0],
              urlLossless: item.url,
              date: item.uploadTime,
            });
          }
        }
      });

      GalleryState.allDisplayImages.sort(
        (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()
      );
    }

    async function initialize(): Promise<void> {
      const loadingIndicator = document.querySelector(
        ".galleryLoadingInd"
      ) as HTMLElement | null;
      try {
        const data = await fetchDisplay();
        if (!data) return;

        processImages(data);
        loadImages(0, 16);

        if (loadingIndicator) loadingIndicator.style.display = "none";
        const loadMoreButton = document.getElementById(
          "loadMore"
        ) as HTMLButtonElement | null;
        if (loadMoreButton) {
          loadMoreButton.style.display = "block";
        }
      } catch (error) {
        console.error("Initialization failed:", error);
        if (loadingIndicator) {
          loadingIndicator.innerHTML = `
          <b>Failed to load images.</b> Which can only mean that something is broken beyond human comprehension.<br>
          Notify Potto or something, they're not human. Probably.<br><br>
          Tell them: <b>./gallery: ${error instanceof Error ? error.message : "Unknown error, you're cooked."}</b>
          `;
          loadingIndicator.classList.remove("holdon");
        }
      }
    }

    // Start the application
    initialize();
  })();
</script>

<style lang="scss">
  /*IMAGEZOOM-------------------------------*/
  .b2Imgs,
  .imgz {
    cursor: pointer;
  }

  .zoomindimmer {
    position: fixed;
    top: 0;
    background: rgba(0, 0, 0, 0.856);
    height: 100vh;
    width: 100%;
    z-index: 1;
    -webkit-backdrop-filter: grayscale(1);
    backdrop-filter: grayscale(1);
    display: none;
  }

  .zoomin {
    position: fixed;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    display: none;
  }

  .zoomincontent {
    max-height: 95vh;
    max-width: 100vw;
    -webkit-animation: zoom 0.5s forwards var(--sleek);
    animation: zoom 0.5s forwards var(--sleek);
  }

  .imgpropgroup {
    display: flex;
  }

  .zoomalttext {
    max-width: 60vw;
    text-align: center;
    background: var(--blackfL);
    color: var(--textfL);
    margin: 0.3em 1rem 0.5em 1rem;
    animation: zoom 0.5s forwards var(--sleek);
    padding: 0.2rem 1rem;
    border-radius: 10px;
    font-weight: 800;
    font-family: var(--contentsecondary);
  }

  .zoomlosslesslink {
    max-width: 60vw;
    text-align: center;
    border: solid 1px var(--blackfL);
    color: var(--textD) !important;
    margin: 0.3em 1rem 0.5em 1rem;
    animation: zoom 0.5s forwards var(--sleek);
    padding: 0.2rem 1rem;
    border-radius: 10px;
    font-weight: 200;
    font-family: var(--contentsecondary);
  }

  .zoomaltlink {
    color: var(--accentD) !important;
  }

  .zoomincontentAlign {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    cursor: zoom-out;
  }

  .zoomDisable {
    display: none;
  }

  @-webkit-keyframes zoom {
    from {
      opacity: 0;
      transform: scale(0.95);
    }

    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  @keyframes zoom {
    from {
      opacity: 0;
      transform: scale(0.95);
    }

    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  /*IMAGEZOOM-------------------------------*/

  .filterDropdown {
    background: var(--blackfL);
    color: var(--textfL);
    font-family: var(--contentsecondary);
    font-weight: 600;
    border-radius: 5px;
    padding: 0.3rem 3rem;
    cursor: pointer;

    &:hover {
      background: var(--accentD);
      color: var(--textD);
      font-weight: 900;
    }

    &.holdDrop {
      background: none;
      border: solid 1px var(--accentD);
      box-sizing: border-box;
      color: var(--textaccentD);
      font-weight: 900;
    }
  }

  .filterDrop {
    position: absolute;
    background: var(--alpha2baseD);
    font-weight: 500;
    margin-top: 3em;
    width: 130%;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1rem 0;
    backdrop-filter: blur(10px);
    border-radius: 20px;
    transition:
      background 0.2s var(--sleek),
      color 0.2s var(--sleek),
      transform 0.2s var(--anchorhead),
      opacity 0.2s var(--sleek);
    transform: translateY(-120px);
    opacity: 0;
    pointer-events: none;
    //display: none;

    &.dropped {
      transform: translateY(0px);
      opacity: 1;
      pointer-events: auto;
      transition:
        transform 0.2s var(--sleek),
        opacity 0.2s var(--sleek);
      //display: flex;
    }
  }

  @media screen and (max-width: 420px) {
    .filterDropdown {
      padding: 0.3rem 1.5rem;
    }

    .filterDrop {
      width: 110%;
    }
  }

  .filterButtonGroup {
    color: var(--textD);
    margin-bottom: 1em;
    width: 100%;
    display: flex;
    justify-content: center;
    transition:
      background 0.2s var(--sleek),
      color 0.2s var(--sleek);
  }

  .FTbutton {
    cursor: pointer;
    margin: 0 2%;
    background: var(--alphabaseD);
    width: 25%;
    //border: solid 1px var(--textD);
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 0.3rem;
    border-radius: 10px;
    transition:
      background 0.2s var(--sleek),
      filter 0.2s var(--sleek),
      transform 0.2s var(--anchorhead);

    &:hover {
      filter: var(--brightnessD);
    }

    &:active {
      transform: scale(0.8);
    }

    &.FTon {
      .FTicon {
        transform: scale(1.2);
      }

      background: var(--accentD);
    }
  }

  .filterCheckbox {
    display: none;
  }

  .FTicon {
    font-variation-settings:
      "FILL" 1,
      "wght" 200,
      "GRAD" 0,
      "opsz" 24;
    //gicons
    --iconSize: 90px;
    height: var(--iconSize);
    width: var(--iconSize);
    font-size: 70px;
    display: grid;
    place-items: center;
    transition:
      color 0.2s var(--sleek),
      transform 0.2s var(--bounce);
  }

  .FTname {
    font-family: var(--display);
    font-weight: 100;
    margin: 0.5rem 0;
  }

  #reloadButton {
    cursor: pointer;
    pointer-events: none;
    padding: 0.5em;
    border: solid 1px var(--blackfL);
    font-family: var(--content);
    color: var(--textD);
    border-radius: 10px;
    width: 70%;
    text-align: center;
    opacity: 0.5;
    border: 3px solid var(--textD);
    box-shadow: var(--accentD) 0 0px 0;
    transition:
      transform 0.2s var(--bounce),
      box-shadow 0.2s var(--bounce);

    &.reloadReady {
      box-shadow: var(--textD) 0 5px 0;
      transform: translateY(-5px);
      pointer-events: auto;
      opacity: 1;
      background: var(--alphabaseD);
    }

    &:hover {
      transform: translateY(-10px);
      box-shadow: var(--textD) 0 10px 0;
    }

    &:active {
      transform: translateY(0px);
      box-shadow: var(--accentD) 0 0 0;
      transition: all 0.1s var(--accel);
    }
  }
</style>
