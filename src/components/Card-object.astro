---
/*
 * Card Component
 * A versatile card component that can be configured for various use cases.
 *
 * @component Card
 *
 * @prop {boolean} [isInvisible=false] - Makes the card invisible
 * @prop {boolean} [isTextCard=false] - Configures the card as a text-only card
 * @prop {"tall" | "extraTall" | "big" | "wide" | "superWide" | "mediumWide"} [size] - Determines the card size
 * @prop {string} [title] - Card title text
 * @prop {"medium" | "big" | "bigger" | "huge" | "reg" | "regRead" | "small"} [titleSize="bigger"] - Size of the title text
 * @prop {string} [content] - Card content text
 * @prop {"medium" | "big" | "bigger" | "huge" | "reg" | "regRead" | "small"} [contentSize="regRead"] - Size of the content text
 * @prop {boolean} [isLink=false] - Renders the card as a clickable link
 * @prop {string} [href] - URL for link cards
 * @prop {boolean} [isReturnLink=false] - Styles the card as a return link
 * @prop {Object} [image] - Image configuration object
 * @prop {string} image.src - Source URL of the image
 * @prop {string} image.alt - Alt text for the image
 * @prop {"left" | "right" | "top" | "bottom" | "center"} [image.position] - Position of the image within the card
 * @prop {string} [class] - Additional CSS classes to apply to the card
 *
 * @slot default - Default slot for additional content
 *
 * @example
 * <Card
 *   isLink={true}
 *   href="/some-path"
 *   title="Card Title"
 *   content="Card content goes here"
 *   image={{
 *     src: "/path/to/image.jpg",
 *     alt: "Description",
 *     position: "center"
 *   }}
 * />
 */

import "../styles/global.scss";
// Card.astro
interface Props {
  // Base card properties
  isInvisible?: boolean;
  isTextCard?: boolean;

  // Size modifiers
  size?: "tall" | "extraTall" | "big" | "wide" | "superWide" | "mediumWide";

  // Text styling
  title?: string;
  titleSize?:
    | "medium"
    | "big"
    | "bigger"
    | "huge"
    | "reg"
    | "regRead"
    | "small";
  content?: string;
  contentSize?:
    | "medium"
    | "big"
    | "bigger"
    | "huge"
    | "reg"
    | "regRead"
    | "small";

  // Link card properties
  isLink?: boolean;
  href?: string;
  isReturnLink?: boolean;

  // Image properties
  image?: {
    src: string;
    alt: string;
    position?: "left" | "right" | "top" | "bottom" | "center";
  };

  // Additional class names
  class?: string;
}

const {
  isInvisible = false,
  isTextCard = false,
  size,
  title,
  titleSize = "bigger",
  content,
  contentSize = "regRead",
  isLink = false,
  href,
  isReturnLink = false,
  image,
  class: className,
} = Astro.props;

// Base styles that apply to all cards
const baseStyles = [
  "relative",
  "w-full",
  "max-w-full",
  "rounded-[20px]",
  "overflow-hidden",
  "transition-all",
  "duration-1000",
  "ease-[var(--sleek)]",
  "shadow-lg",
  !isInvisible && "bg-[var(--basesecondaryD)]",
  "text-[var(--textD)]",
];

// Size-specific styles
const sizeStyles = size
  ? {
      tall: "row-span-2",
      extraTall: "row-span-3",
      big: "row-span-2 col-span-2",
      wide: "col-span-3",
      superWide: "col-span-4",
      mediumWide: "col-span-2",
    }[size]
  : "";

// Link card specific styles
const linkStyles = isLink
  ? [
      "text-center",
      "flex",
      "items-center",
      "justify-center",
      "overflow-visible",
      "transition-all",
      "duration-500",
      "ease-[var(--sleek)]",
      "hover:bg-[var(--accentD)]",
      "hover:scale-110",
      "hover:rotate-3",
      isReturnLink && "hover:bg-[var(--red1)]",
    ]
  : [];

// Text styles mapping
const textSizeStyles = {
  medium: "text-2xl font-medium",
  big: "text-3xl font-medium",
  bigger: "text-4xl font-black",
  huge: "text-7xl font-black",
  reg: "text-lg font-normal",
  regRead: "text-base leading-7 font-medium tracking-tight",
  small: "text-sm leading-7 font-normal tracking-tight",
};

// Image position styles
const imagePositionStyles = {
  left: "object-left",
  right: "object-right",
  top: "object-top",
  bottom: "object-bottom",
  center: "object-center",
};

const titleStyles = [
  "mb-4",
  "border-b",
  "border-[var(--textD)]",
  textSizeStyles[titleSize],
];

const contentStyles = [textSizeStyles[contentSize]];

const allStyles = [...baseStyles, sizeStyles, ...linkStyles, className]
  .filter(Boolean)
  .join(" ");
---

{
  isLink ? (
    <a href={href} class={allStyles}>
      {image && (
        <img
          src={image.src}
          alt={image.alt}
          class={`absolute w-full h-full object-cover ${imagePositionStyles[image.position || "center"]} select-none transition-all duration-200 ease-[var(--sleek)]`}
        />
      )}
      {title && <div class={titleStyles.join(" ")}>{title}</div>}
      {content && <div class={contentStyles.join(" ")}>{content}</div>}
      <slot />
    </a>
  ) : (
    <div class={allStyles}>
      {image && (
        <img
          src={image.src}
          alt={image.alt}
          class={`absolute w-full h-full object-cover ${imagePositionStyles[image.position || "center"]} select-none transition-all duration-200 ease-[var(--sleek)]`}
        />
      )}
      {title && <div class={titleStyles.join(" ")}>{title}</div>}
      {content && <div class={contentStyles.join(" ")}>{content}</div>}
      <slot />
    </div>
  )
}
